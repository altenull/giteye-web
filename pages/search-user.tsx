import { Box, Button, Heading } from '@chakra-ui/react';
import type { GetServerSidePropsContext, NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import Layout from '../foundation/components/Layout';
import GithubUsersSearchBar from '../search/components/GithubUsersSearchBar';
import UserCard from '../search/components/UserCard';
import { useGithubUsersSearchHistory } from '../search/hooks/useGithubUsersSearchHistory';
import { pluralize } from '../utils/pluralize.util';
import { SearchUser } from './api/models/user.model';

interface Props {
  searchUsers: SearchUser[];
}

const SEARCH_RESULT_CHUNK = 4;

const SearchUser: NextPage<Props> = ({ searchUsers }) => {
  const [currentSearchResultChunkStep, setCurrentSearchResultChunkStep] = useState<number>(0);
  const { initGithubUsersSearchHistory } = useGithubUsersSearchHistory();
  const router = useRouter();
  const { q } = router.query;

  useEffect(() => {
    // TODO: Run initGithubUsersSearchHistory only once when starting app.
    initGithubUsersSearchHistory();
  }, []);

  useEffect(() => {
    // FIXME: setCurrentSearchResultChunkStep value is still existing even if search other things.
    setCurrentSearchResultChunkStep(0);
  }, [q]);

  const searchResultChunkMax: number = currentSearchResultChunkStep * SEARCH_RESULT_CHUNK + SEARCH_RESULT_CHUNK;
  const canLoadMore: boolean = searchUsers.length > searchResultChunkMax;

  return (
    <>
      <Head>
        <title>Giteye | Search: {q}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>
        <GithubUsersSearchBar initalSearchValue={q as string} />

        <Heading style={{ margin: '16px auto', textAlign: 'right' }} as="h4" size="sm" maxW="xl">
          {searchUsers.length} {pluralize('result', searchUsers.length)}
        </Heading>

        <Box style={{ margin: '0 auto' }} maxW="xl">
          {searchUsers.slice(0, searchResultChunkMax).map((searchUser) => (
            <UserCard key={searchUser.id} searchUser={searchUser} />
          ))}
          {canLoadMore && (
            <Button
              style={{ width: '100%', marginTop: '12px' }}
              colorScheme="blue"
              size="md"
              onClick={() => setCurrentSearchResultChunkStep((prev) => prev + 1)}
            >
              Load More
            </Button>
          )}
        </Box>
      </Layout>
    </>
  );
};

export async function getServerSideProps({ query }: GetServerSidePropsContext) {
  const { q } = query;

  const searchUsers: SearchUser[] = await fetch(`${process.env.API_ENDPOINT}/search/users/${q}`)
    .then((res) => res.json())
    .then((data: SearchUser[]) => data);

  return { props: { searchUsers } };
}

export default SearchUser;
